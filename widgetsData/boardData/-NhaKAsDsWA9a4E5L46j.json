{
  "addCellHeaderTemplate": false,
  "addCustomComputedProperty": true,
  "addCustomComputedPropertyForLeftHeaders": false,
  "addCustomComputedPropertyForTopHeaders": false,
  "addPreventDropCondition": false,
  "allowUserSpecificLeftHeaders": false,
  "allowUserSpecificTopHeaders": false,
  "blankColumnDisplayName": "",
  "blankRowDisplayName": "",
  "blockDragging": false,
  "blockHorizontalDragging": false,
  "blockVerticalDragging": false,
  "cardBackgroundColorCoding": "let currentDate = new Date();\r\nlet releaseByDate = new Date(item.requiredBy);\r\n\r\nlet businessDays = 0;\r\nwhile (currentDate <= releaseByDate) {\r\n    let dayOfWeek = currentDate.getDay();\r\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\r\n        businessDays++;\r\n    }\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n}\r\n\r\nif (releaseByDate instanceof Date && !isNaN(releaseByDate)) {\r\n    if (businessDays < 0) {\r\n        return '#FF5C5C'; // Past releaseByDate\r\n    } else if (businessDays === 0) {\r\n        return '#FF5C5C'; // ReleaseByDate is today (assuming currentDate is inclusive)\r\n    } else if (businessDays === 1) {\r\n        return '#FFA500'; // 1 business day from releaseByDate\r\n    } else if (businessDays >= 2 && businessDays <= 3) {\r\n        return '#FFFF5C'; // 2 to 3 business days from releaseByDate\r\n    } else {\r\n        return '#98FB98'; // More than 3 business days from releaseByDate\r\n    }\r\n} else {\r\n    // Invalid releaseByDate\r\n    return '';\r\n}\r\n\r\n",
  "cardClassBindings": "",
  "cellBackgroundColorCoding": "",
  "cellHeaderTemplate": "",
  "customComputedProperty": "function extendSchedule(tasks, shifts) {\r\n  const extendedSchedule = [];\r\n  let currentShiftIndex = 0;\r\n\r\n  // Helper function to get the next shift index\r\n  const getNextShiftIndex = (currentIndex) => (currentIndex + 1) % shifts.length;\r\n\r\n  // Find initial shift index\r\n  const findInitialShiftIndex = (shiftName) => shifts.findIndex(shift => shift.name == shiftName);\r\n\r\n  tasks.forEach(task => {\r\n    console.log(task)\r\n    let remainingHours = task.totalEstimatedHours;\r\n    currentShiftIndex = findInitialShiftIndex(task.$shift$display);\r\n    let sequenceNumber = 0; // Start sequence number for appending to rowKey\r\n\r\n    while (remainingHours > 0) {\r\n      const currentShift = shifts[currentShiftIndex];\r\n      const hoursForThisShift = Math.min(remainingHours, currentShift?.hours);\r\n      remainingHours -= hoursForThisShift;\r\n\r\n      extendedSchedule.push({\r\n        ...task,\r\n        sequenceNumber,\r\n        rowKey: task.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''), // Append sequence number to rowKey\r\n        shift: currentShift?.rowKey, // Set to the rowKey from the shifts array\r\n        '$shift$display': currentShift?.name, // Set to the name of the shift\r\n        totalEstimatedHours: hoursForThisShift\r\n      });\r\n\r\n      if (remainingHours > 0) {\r\n        currentShiftIndex = getNextShiftIndex(currentShiftIndex);\r\n        sequenceNumber++; // Increment sequence number for the next rowKey if needed\r\n      }\r\n    }\r\n  });\r\n\r\n  return extendedSchedule;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Shifts data (complete dataset as per your image)\r\nconst shiftsData = [\r\n  { rowKey: \"-NsJP6PBwNsrCBkX901x\", _id: 1, name: \"Monday Morning\", hours: 8 },\r\n  { rowKey: \"-NsJP6PG2vvagFmF4V4J\", _id: 2, name: \"Monday Afternoon\", hours: 8 },\r\n  { rowKey: \"-NsJP6PTedd4IeqG0bQ1\", _id: 3, name: \"Tuesday Morning\", hours: 8 },\r\n  { rowKey: \"-NsJP6PfbShJA6IgIXot\", _id: 4, name: \"Tuesday Afternoon\", hours: 8 },\r\n  { rowKey: \"-NsJP6Ps07zL-rINEpCz\", _id: 5, name: \"Wednesday Morning\", hours: 8 },\r\n  { rowKey: \"-NsJP6Q6u0PoYwaW_Bi-\", _id: 6, name: \"Wednesday Afternoon\", hours: 8 },\r\n  { rowKey: \"-NsJP6QLLE1hBVUJU_8I\", _id: 7, name: \"Thursday Morning\", hours: 8 },\r\n  { rowKey: \"-NsJP6QaAfqfIzKgqNoY\", _id: 8, name: \"Thursday Afternoon\", hours: 8 },\r\n  { rowKey: \"-NsJP6Qrw_saqq2p2dWa\", _id: 9, name: \"Friday Morning\", hours: 8 },\r\n  { rowKey: \"-NsJPJJ6YR9M1UHD2SXV\", _id: 10, name: \"Friday Afternoon\", hours: 8 },\r\n  // ... and so on for all shifts in the week\r\n];\r\n\r\n// Example tasks data (assuming this is the data from your first dataset)\r\nconst tasksData = $getGrid('opportunityLines').filter(task => task.totalEstimatedHours > 0);\r\nconsole.table(tasksData)\r\n\r\nconst newSchedule = extendSchedule(tasksData, shiftsData);\r\nconsole.log('got new schedule')\r\nconsole.table(newSchedule)\r\n\r\nreturn newSchedule\r\n",
  "customComputedPropertyForLeftHeaders": "",
  "customComputedPropertyForTopHeaders": "",
  "editCardFunction": "",
  "filter": "{\"condition\":\"AND\",\"rules\":[{\"andOr\":\"AND\",\"key\":\"name\",\"operator\":\"contains\",\"value\":null,\"name\":\"Work Order Number\",\"expression\":false,\"hidden\":false},{\"andOr\":\"\",\"key\":\"salesperson\",\"operator\":\"in\",\"value\":null,\"name\":\"Salesperson\",\"expression\":false,\"hidden\":false}]}",
  "functionForMatchingToCustomLeftHeaders": "",
  "functionForMatchingToCustomTopHeaders": "",
  "itemsStorage": "opportunityLines",
  "laneCol": "shift",
  "lanesStorage": "opportunityLines",
  "leftLaneCol": "resource",
  "onChangeScript": "  // Shifts data (complete dataset as per your image)\nconst shifts = [\n  { rowKey: '-NsJP6PBwNsrCBkX901x', _id: 1, name: 'Monday Morning', hours: 8 },\n  {\n    rowKey: '-NsJP6PG2vvagFmF4V4J',\n    _id: 2,\n    name: 'Monday Afternoon',\n    hours: 8,\n  },\n  { rowKey: '-NsJP6PTedd4IeqG0bQ1', _id: 3, name: 'Tuesday Morning', hours: 8 },\n  {\n    rowKey: '-NsJP6PfbShJA6IgIXot',\n    _id: 4,\n    name: 'Tuesday Afternoon',\n    hours: 8,\n  },\n  {\n    rowKey: '-NsJP6Ps07zL-rINEpCz',\n    _id: 5,\n    name: 'Wednesday Morning',\n    hours: 8,\n  },\n  {\n    rowKey: '-NsJP6Q6u0PoYwaW_Bi-',\n    _id: 6,\n    name: 'Wednesday Afternoon',\n    hours: 8,\n  },\n  {\n    rowKey: '-NsJP6QLLE1hBVUJU_8I',\n    _id: 7,\n    name: 'Thursday Morning',\n    hours: 8,\n  },\n  {\n    rowKey: '-NsJP6QaAfqfIzKgqNoY',\n    _id: 8,\n    name: 'Thursday Afternoon',\n    hours: 8,\n  },\n  { rowKey: '-NsJP6Qrw_saqq2p2dWa', _id: 9, name: 'Friday Morning', hours: 8 },\n  {\n    rowKey: '-NsJPJJ6YR9M1UHD2SXV',\n    _id: 10,\n    name: 'Friday Afternoon',\n    hours: 8,\n  },\n  // ... and so on for all shifts in the week\n]\n  \n  // Extract the total estimated hours from the main item\n  const totalEstimatedHours = item.totalEstimatedHours;\n\n  // Find the new starting shift index\n  const newShiftIndex = shifts.findIndex(shift => shift.name === headerY);\n  if (newShiftIndex === -1) {\n    console.error('Shift not found:', headerY);\n    return;  // Early exit if the shift isn't found\n  }\n\n  // Calculate the distribution of hours across the new shifts\n  let remainingHours = totalEstimatedHours;\n  let currentShiftIndex = newShiftIndex;\n  let sequenceNumber = 0;\n  let updatedTasks = [];\n\n  while (remainingHours > 0) {\n    const currentShift = shifts[currentShiftIndex];\n    const hoursForThisShift = Math.min(remainingHours, currentShift.hours);\n    remainingHours -= hoursForThisShift;\n\n    updatedTasks.push({\n      ...item,  // Spread the main item to retain other properties\n      sequenceNumber,\n      rowKey: item.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''),\n      shift: currentShift.rowKey,\n      '$shift$display': currentShift.name,\n      'headerX': headerX,  // Assuming headerX as the stage\n      totalEstimatedHours: hoursForThisShift\n    });\n\n    sequenceNumber++;\n    currentShiftIndex = (currentShiftIndex + 1) % shifts.length;  // Move to the next shift\n  }\n\n  // Update the draggableComponents object\n  // First, clear the current task's entries\n  Object.keys(draggableComponents).forEach(stage => {\n    Object.keys(draggableComponents[stage]).forEach(shift => {\n      draggableComponents[stage][shift] = draggableComponents[stage][shift].filter(task => !task.rowKey.startsWith(rowKey));\n    });\n  });\n\n  // Add the updated tasks to the new positions\n  updatedTasks.forEach(task => {\n    const stage = task.headerX;\n    const shiftName = task['$shift$display'];\n    if (!draggableComponents[stage][shiftName]) {\n      draggableComponents[stage][shiftName] = [];  // Create the array if it doesn't exist\n    }\n    draggableComponents[stage][shiftName].push(task);\n  });\n\n  return draggableComponents;",
  "preventDropCondition": "",
  "reloadOnDrag": false,
  "showLeftHeaderTooltips": false,
  "showLeftHeaderTotals": true,
  "showTopHeaderTooltips": false,
  "showTopHeaderTotals": true,
  "smallTemplate": "<h6>{{item.qtytoMfg}}</h6>",
  "template": "<div class=\"t-board-card-container\">\r\n    <div class=\"t-board-card-inner\">\r\n        <div class=\"flex-grow-1 t-board-card-row\">\r\n            <div class=\"flex-grow-1 t-board-card-top space-between\">\r\n                <p class=\"t-board-card-section-title\">{{item.name}}</p>\r\n                <span class=\"t-board-card-bar t-board-card-bar-orange\"></span>\r\n            </div>\r\n            <div class=\" flex-grow-1 t-board-card-section\"></div>\r\n            <div class=\" flex-grow-1 t-board-card-section\"></div>\r\n        </div>\r\n        <div class=\"flex-grow-1 t-board-card-column\">\r\n            <div class=\"flex-grow-1 t-board-card-section\">\r\n            </div>\r\n            <div class=\" flex-grow-1 t-board-card-section\">\r\n                <p class=\"t-board-card-section-subtitle\">{{item.$customer$display}}</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"flex-grow-1 t-board-card-row space-between\">\r\n            <div class=\"t-board-card-section\">\r\n                <div class=\"t-board-card-avatar\">UN</div>\r\n                <div class=\"UNderline\"></div>\r\n            </div>\r\n            <div class=\"flex-grow-1 t-board-card-section t-board-icons\">\r\n\r\n\r\n    <template v-if=\"workOrderOperations = $getGrid('workOrderOperations')\">\r\n      <!-- Group the workOrderOperations by $type$display -->\r\n       <template v-if=\"filteredWorkOrders = workOrderOperations.filter(op => op.workOrder === item.rowKey)\">\r\n      <template v-if=\"groupedWorkOrders = filteredWorkOrders.reduce((acc, workOrder) => {\r\n          const typeDisplay = workOrder.$type$display;\r\n          const hours = workOrder.hours;\r\n          if (!acc[typeDisplay]) acc[typeDisplay] = 0;\r\n          acc[typeDisplay] += hours;\r\n          return acc;\r\n        }, {})\">\r\n        <!-- Iterate over the groupedWorkOrders and display them -->\r\n        <div class=\"typeTextCon\">\r\n        <div class=\"typeText\" v-for=\"(totalHours, typeDisplay) in groupedWorkOrders\" :key=\"typeDisplay\" >\r\n            {{typeDisplay.slice(0, 3)}}<br> \r\n            \r\n             {{ totalHours }}\r\n        </div>\r\n        </div>\r\n      </template>\r\n      </template>\r\n    </template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div class=\"t-board-calendar t-board-bg-red\">\r\n                    <i class=\"fa fa-calendar\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
  "titleCol": "name",
  "updateRuleFunctionForCustomLeftHeaders": "",
  "updateRuleFunctionForCustomTopHeaders": "",
  "visibleLanes": [
    "_BLANK",
    "-NsJP6PBwNsrCBkX901x",
    "-NsJP6PTedd4IeqG0bQ1",
    "-NsJP6Ps07zL-rINEpCz",
    "-NsJP6QLLE1hBVUJU_8I",
    "-NsJP6Qrw_saqq2p2dWa"
  ],
  "visibleLeftLanes": [
    "_BLANK",
    "-NeEtrvSQ3iZeunsXVta",
    "-NhgWKZ57I5yhByLyz7M",
    "-NhgWS7mMulw7loJsmL9"
  ]
}
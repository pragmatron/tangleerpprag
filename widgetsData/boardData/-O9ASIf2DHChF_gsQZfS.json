{
  "addCellHeaderTemplate": true,
  "addCustomComputedProperty": true,
  "addCustomComputedPropertyForLeftHeaders": false,
  "addCustomComputedPropertyForTopHeaders": false,
  "addPreventDropCondition": true,
  "allowUserSpecificLeftHeaders": false,
  "allowUserSpecificTopHeaders": false,
  "blankColumnDisplayName": "",
  "blankRowDisplayName": "",
  "blockDragging": false,
  "blockHorizontalDragging": false,
  "blockVerticalDragging": false,
  "cardBackgroundColorCoding": " if (item.estimatedProductionPerDay > item.actualProductionPerDay){\n\n     return 'light-red'\n\n }\n \n else {\n       return 'white';  \n }\n \n \n\n",
  "cardClassBindings": "",
  "cellBackgroundColorCoding": "\nif(100 >= getSumOfProperty(headerX, headerY, 'qtytoMfg')) {\n    //return '#D5FFC4'\n    return '#fff'\n} else {\n    return '#ffb9b9'\n\n    \n}\n",
  "cellHeaderTemplate": "<div style=\"display: flex; flex-direction: column; gap: 1px; padding: 4px; background-color: #f1f1f1; border-radius: 8px; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); margin: 4px 0;\">\n  <div \n    :style=\"{\n      height: '5px',\n      borderRadius: '6px',\n      background: getSumOfProperty(headerX, headerY, 'totalEstimatedHours') > 40 ? '#ff6b6b' : 'linear-gradient(90deg, #4a90e2, #50c9c3)',\n      width: (getSumOfProperty(headerX, headerY, 'totalEstimatedHours') / 40 * 100 > 100 ? 100 : getSumOfProperty(headerX, headerY, 'totalEstimatedHours') / 40 * 100) + '%',\n      transition: 'width 0.4s ease'\n    }\">\n  </div>\n  <div style=\"font-size: 12px; color: #333; text-align: right;\">\n    {{ getSumOfProperty(headerX, headerY, 'totalEstimatedHours') }} / 40 hrs \n    ({{ (getSumOfProperty(headerX, headerY, 'totalEstimatedHours') / 40 * 100).toFixed(2) }}%)\n  </div>\n</div>\n",
  "customComputedProperty": "function extendSchedule(tasks, scheduleWeeks) {\n  const extendedSchedule = [];\n  let currentWeekIndex = 0;\n\n  // Helper function to get the next week index\n  const getNextWeekIndex = (currentIndex) => (currentIndex + 1) % scheduleWeeks.length;\n\n  // Find initial week index\n  const findInitialWeekIndex = (weekScheduled) => scheduleWeeks.findIndex(week => week.name == weekScheduled);\n\n  tasks.forEach(task => {\n    //console.log(task)\n    let remainingHours = task.totalEstimatedHours; // Changed to totalEstimatedHours\n    //console.log(task.$weekScheduled$display)\n    currentWeekIndex = findInitialWeekIndex(task.$weekScheduled$display);\n    let sequenceNumber = 0; // Start sequence number for appending to rowKey\n\n    while (remainingHours > 0) {\n      const currentWeek = scheduleWeeks[currentWeekIndex];\n      // console.log(currentWeek, 'current week', currentWeekIndex)\n      // console.log(remainingHours,currentWeek?.availableCapacity)\n      const hoursForThisWeek = Math.min(remainingHours, currentWeek?.availableCapacity);\n\n      // console.log(hoursForThisWeek)\n      \n      remainingHours -= hoursForThisWeek;\n\n      extendedSchedule.push({\n        ...task,\n        sequenceNumber,\n        rowKey: task.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''), // Append sequence number to rowKey\n        weekScheduled: currentWeek?.rowKey, // Set to the rowKey from the scheduleWeeks array\n        '$weekScheduled$display': currentWeek?.name, // Set to the name of the week\n        totalEstimatedHours: hoursForThisWeek,\n        mainTask: sequenceNumber < 1 ? true : false,\n        part: task.$part$display,\n      });\n      \n\n      if (remainingHours > 0) {\n        currentWeekIndex = getNextWeekIndex(currentWeekIndex);\n        sequenceNumber++; // Increment sequence number for the next rowKey if needed\n      }\n    }\n  });\n\n  return extendedSchedule;\n}\n\n// ScheduleWeeks data (complete dataset)\nconst scheduleWeeksData = $getGrid('scheduleWeeks')\n\n// Example tasks data (from opportunityLines)\nconst tasksData = $getGrid('opportunityLines').filter(task => task.totalEstimatedHours > 0 && task.completed !== true);\n\n\nconst newSchedule = extendSchedule(tasksData, scheduleWeeksData);\nconsole.log('got new schedule')\nconsole.table(newSchedule)\n\nreturn newSchedule",
  "customComputedPropertyForLeftHeaders": "",
  "customComputedPropertyForTopHeaders": "",
  "editCardFunction": "",
  "functionForMatchingToCustomLeftHeaders": "",
  "functionForMatchingToCustomTopHeaders": "// const headerTimestamp = moment(customHeader.value);\n// const scheduledStart = moment(rowData.scheduledStart);\n\n// // Compare the dates to see if they are on the same day and hour\n// if(customHeader.display == '_BLANK' && rowData.scheduledStart == '_BLANK') {\n//     return true\n// }\n// return headerTimestamp.isSame(scheduledStart, 'day')",
  "itemsStorage": "",
  "laneCol": "weekScheduled",
  "lanesStorage": "opportunityLines",
  "leftLaneCol": "part",
  "onChangeScript": "// ScheduleWeeks data (complete dataset as per your scenario)\nconst scheduleWeeks = $getGrid('scheduleWeeks');\n\n// Extract the total estimated hours from the main item\nconst hours = item.totalEstimatedHours;\n\n// Find the new starting week index based on headerX, which is now the week name\nconst newWeekIndex = scheduleWeeks.findIndex(week => week.name === headerX);\nif (newWeekIndex === -1) {\n  console.error('Week not found:', headerX);\n  return;  // Early exit if the week isn't found\n}\n\n// Calculate the distribution of hours across the new weeks\nlet remainingHours = hours;\nlet currentWeekIndex = newWeekIndex;\nlet sequenceNumber = 0;\nlet updatedTasks = [];\n\nwhile (remainingHours > 0) {\n  const currentWeek = scheduleWeeks[currentWeekIndex];\n  const hoursForThisWeek = Math.min(remainingHours, currentWeek.availableCapacity); // Assume each week has an 'availableCapacity'\n  remainingHours -= hoursForThisWeek;\n  console.log(currentWeek)\n  console.log('hours for this week', hoursForThisWeek)\n  console.log('remainig', remainingHours)\n\n  updatedTasks.push({\n    ...item,  // Spread the main item to retain other properties\n    sequenceNumber,\n    rowKey: item.rowKey + (sequenceNumber > 0 ? `-${sequenceNumber}` : ''),\n    weekScheduled: currentWeek.rowKey,\n    '$weekScheduled$display': currentWeek.name,\n    'headerY': headerY,  // 'headerY' represents the part\n    totalEstimatedHours: hoursForThisWeek\n  });\n\n  sequenceNumber++;\n  currentWeekIndex = (currentWeekIndex + 1) % scheduleWeeks.length;  // Move to the next week\n}\n\n// Update the draggableComponents object\n// First, clear the current task's entries under the specific week and part\nObject.keys(draggableComponents).forEach(week => {\n  Object.keys(draggableComponents[week]).forEach(part => {\n     if(draggableComponents[week] &&draggableComponents[week][part]) {\n      draggableComponents[week][part] = draggableComponents[week][part].filter(task => !task.rowKey.startsWith(item.rowKey));\n\n     }\n  })\n  // if (draggableComponents[week] && draggableComponents[week][headerY]) {\n  //   draggableComponents[week][headerY] = draggableComponents[week][headerY].filter(task => !task.rowKey.startsWith(item.rowKey));\n  // }\n});\n\n// Add the updated tasks to the new positions\nconsole.log('updated tasks', updatedTasks)\nupdatedTasks.forEach(task => {\n  const weekName = task['$weekScheduled$display']; // This corresponds to headerX\n  const part = task['headerY']; // This corresponds to headerY\n\n  console.log(weekName, part)\n\n  if (!draggableComponents[weekName]) {\n    draggableComponents[weekName] = {}; // Create the week if it doesn't exist\n  }\n  if (!draggableComponents[weekName][part]) {\n    draggableComponents[weekName][part] = []; // Create the part array within the week if it doesn't exist\n  }\n  draggableComponents[weekName][part].push(task);\n});\n\nconsole.log('draggable components', draggableComponents)\n\nreturn draggableComponents;\n",
  "preventDropCondition": "",
  "reloadOnDrag": false,
  "showLeftHeaderTooltips": false,
  "showLeftHeaderTotals": false,
  "showTopHeaderTooltips": false,
  "showTopHeaderTotals": false,
  "smallTemplate": " \n <span\n style=\"font-size:14px\"\n >\n {{ (item.actualProductionPerDay / item.estimatedProductionPerDay * 100).toFixed(0) }}%\n </span>",
  "sortIndexCol": "",
  "template": "  <div class=\"kanban-card\">\n    <div class=\"card-header\">\n      <h4>{{ item.name }}</h4>\n      <h5>{{item.totalEstimatedHours}} - hrs</h5>\n    </div>\n    <div class=\"card-body-demo\">\n      <!-- Left side (Details) -->\n      <div class=\"card-details-left\">\n        <h5>Resource: {{ item.$resource$display }}</h5>\n        <h5>Part: {{ item.$part$display }}</h5>\n        <p>Quantity: {{ item.qtytoMfg }}</p>\n      </div>\n      <!-- Right side (Employee Image and Icon) -->\n      <div class=\"card-details-right\">\n        <img :src=\"item?.$employee?.photo?.url\" alt=\"Employee Photo\" class=\"employee-photo\" />\n        <i class=\"fas fa-tools tools-icon\"></i>\n      </div>\n    </div>\n  </div>",
  "titleCol": "name",
  "updateRuleFunctionForCustomLeftHeaders": "",
  "updateRuleFunctionForCustomTopHeaders": "// if(customHeader.value) { \n    \n\n//     $dgSetRowVals('opportunityLines', rowData.rowKey, { scheduledStart: customHeader.value }) \n//     }",
  "visibleLanes": [
    "-O9AVPNwxqNYemo-E7zq",
    "-O9AVPOQmiuAidg_pec5",
    "-O9AVPOiSmfyeT5wuL_e",
    "-O9AVPOwj2nw35rIQ-g6"
  ],
  "visibleLeftLanes": [
    "-NrAhjRWL6558N88cAHp",
    "-O0FQN7jRrZFx70Pc7zh",
    "-O2UoyyR-LafB1hxq3tQ"
  ],
  "workflow": ""
}